{"version":3,"sources":["images/waterColor.jpg","images/deniseAndBill.jpg","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Banner","styled","div","_templateObject","blueBanner","MainPic","img","_templateObject2","Header","h1","_templateObject3","SubHeader","h2","_templateObject4","googleMaps","__html","Separator","_templateObject5","Home","react_default","a","createElement","Container","Row","Col","sm","md","style","textAlign","src","mainPic","alt","display","dangerouslySetInnerHTML","width","App","src_Home","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wpCCOxC,IAAMC,EAASC,IAAOC,IAAVC,IACcC,KAQpBC,EAAUJ,IAAOK,IAAVC,KAOPC,EAASP,IAAOQ,GAAVC,KAONC,EAAYV,IAAOW,GAAVC,KAOTC,EAAa,CACjBC,OAAM,2kBAGFC,EAAYf,IAAOC,IAAVe,KA2CAC,EApCF,WACX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACrB,EAAD,MACAmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IAChBP,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACfP,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CAACC,UAAU,WACrBT,EAAAC,EAAAC,cAAChB,EAAD,CAASwB,IAAKC,IAASC,IAAI,oBAC3BZ,EAAAC,EAAAC,cAACb,EAAD,oBACAW,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,iCAGFF,EAAAC,EAAAC,cAACL,EAAD,MAEAG,EAAAC,EAAAC,cAACV,EAAD,+BACAQ,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,0DAEFF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CAACK,QAAQ,gBAAiBC,wBAAyBnB,MAGnEK,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,MAGpBP,EAAAC,EAAAC,cAAA,OAAKQ,IAAKzB,IAAY8B,MAAM,WCjEnBC,mLARX,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,cAJUC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.276444c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/waterColor.f5209122.jpg\";","module.exports = __webpack_public_path__ + \"static/media/deniseAndBill.26e3db4b.jpg\";","import React from 'react';\nimport styled from 'styled-components';\nimport blueBanner from './images/waterColor.jpg';\nimport mainPic from './images/deniseAndBill.jpg';\nimport {Container,Col,Row} from 'react-bootstrap';\n\n\nconst Banner = styled.div`\n  background-image: url(${blueBanner});\n  background-size: cover;\n  background-position: bottom;\n  background-repeat: no-repeat;\n  height: 5px;\n  width: 100%;\n`;\n\nconst MainPic = styled.img`\n  width: 100%;\n  margin: 60px auto 20px;\n  box-shadow: 0px 5px 20px 0px rgba(0,0,0,0.3);\n  font-style: italic;\n`;\n\nconst Header = styled.h1`\n  font-size: 60px;\n  font-size: Quicksand;\n  font-weight: bold;\n  color: #f2a9cb;\n`;\n\nconst SubHeader = styled.h2`\n  font-size: 30px;\n  font-size: Quicksand;\n  font-weight: bold;\n  color: #666;\n`;\n\nconst googleMaps = {\n  __html: `<div class=\"mapouter\"><div class=\"gmap_canvas\"><iframe width=\"300\" height=\"300\" id=\"gmap_canvas\" src=\"https://maps.google.com/maps?q=golf%20club%20at%20newcastle&t=&z=13&ie=UTF8&iwloc=&output=embed\" frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\"></iframe></div><style>.mapouter{position:relative;text-align:right;height:300px;width:300px;}.lic{color:red;background-color:white;padding:10px;position:absolute;z-index:999;border-radius: 20px 20px 0 0;right:60px;bottom:0;}.gmap_canvas {overflow:hidden;background:none!important;height:300px;width:300px;}</style></div>`\n};\n\nconst Separator = styled.div`\n  height: 1px;\n  width: 300px;\n  margin: 40px auto;\n  background: rgba(0,0,0,0.3);\n`;\n\nconst Home = () => {\n  return(\n    <div>\n      <Banner />\n      <Container>\n        <Row>\n          <Col sm={0} md={3} />\n          <Col sm={12} md={6} >\n            <div style={{textAlign:'center'}}>\n              <MainPic src={mainPic} alt='Denise and Bill' />\n              <Header>The Wedding</Header>\n              <i>\n                <p>Saturday, September 21, 2019</p>\n                <p>4:00 PM</p>\n                <p>Attire: Semi Formal</p>\n              </i>\n\n              <Separator/>\n\n              <SubHeader>Ceremony and Reception</SubHeader>\n              <i>\n                <p>The Golf Club At Newcastle</p>\n                <p>15500 Six Penny Ln, Newcastle, WA 98059, USA</p>\n              </i>\n              <br/>\n              <div style={{display:'inline-block'}} dangerouslySetInnerHTML={googleMaps} />\n            </div>\n          </Col>\n          <Col sm={0} md={3} />\n        </Row>\n      </Container>\n      <img src={blueBanner} width='100%' />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component } from 'react';\nimport Home from './Home';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}